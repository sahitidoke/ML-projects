# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mfDq7lkf_-rnFMwQfvhg80ofT331GnZ-
"""

pip install googletrans==3.1.0a0

import json
import string
import random
import nltk
import numpy as np
from googletrans import Translator
from nltk.stem import WordNetLemmatizer
import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense, Dropout
nltk.download('punkt')
nltk.download('wordnet')

data_file = open('intents.json').read()
data = json.loads(data_file)

words = []
classes = []
data_x= []
data_y = []

for intent in data["intents"] :
  for pattern in intent["patterns"]:
    tokens = nltk.word_tokenize(pattern)
    words.extend(tokens)
    data_x.append(pattern)
    data_y.append(intent["tag"])

  if intent not in classes:
    classes.append(intent["tag"])
lemmatizer = WordNetLemmatizer()

words = [lemmatizer.lemmatize(word.lower()) for word in words if word not in string.punctuation]
words = sorted(set(words))
classes = sorted(set(classes))

training = []
out_empty = [0]* len(classes)
for idx, doc in enumerate(data_x):
  bow = []
  text = lemmatizer.lemmatize(doc.lower())
  for word in words:
    bow.append(1) if word in text else bow.append(0)
  output_row = list(out_empty)
  output_row[classes.index(data_y[idx])] = 1
  training.append([bow, output_row])
random.shuffle(training)
training = np.array(training, dtype=object)
train_x = np.array(list(training[:,0]))
train_y= np.array(list(training[:,1]))

model = Sequential()
model.add(Dense(128, input_shape = (len(train_x[0]), ),activation = "relu"))
model.add(Dropout(0.5))
model.add(Dense(64, activation = "relu"))
model.add(Dense(len(train_y[0]), activation = "softmax"))
adam = tf.keras.optimizers.legacy.Adam(learning_rate = 0.01, decay = 1e-6)
model.compile(loss='categorical_crossentropy', optimizer = adam, metrics=["accuracy"])
print(model.summary())
model.fit(x=train_x, y=train_y, epochs=150, verbose=1)

def clean_text(text):
  tokens=  nltk.word_tokenize(text)
  tokens = [lemmatizer.lemmatize(word) for word in tokens]
  return tokens

def bag_of_Words(text,vocab):
  tokens= clean_text(text)
  bow = [0]*len(vocab)
  for w in tokens:
    for index, word in enumerate(vocab):
      if word == w:
        bow[index] = 1
  return np.array(bow)


def pred_class(text, vocab, labels):
  bow = bag_of_Words(text, vocab)
  result = model.predict(np.array([bow]))[0]
  thresh = 0.5
  y_pred = [[index, res] for index, res in enumerate(result) if res>thresh]
  y_pred.sort(key=lambda x: x[1], reverse=True)
  return_list = []
  for r in y_pred:
    return_list.append(labels[r[0]])
  return return_list

def get_Response(intents_list, intents_json):
  if len(intents_list)==0:
    result= "I don't understand!"
  else:
    tag = intents_list[0]
    list_intents = intents_json["intents"]
    for i in list_intents:
      if i["tag"]==tag:
        result = random.choice(i["responses"])
        break
  return result

print("Do you want to talk in Spanish? Press 1 for yes and 2 for no. To quit, press 0")
translator = Translator()
num = 0
while True:
    message = input("")
    if message == "0":  # Use '2' instead of '0' for the "no" condition
        break
    elif message == "1":
        print("Great! Start typing in Spanish:")
        num = 1
    else:
      if (num==1):
          x = translator.translate(message, src="es", dest="en")
          intents = pred_class(x.text, words, classes)  # Use x.text to access the translated message
          result = get_Response(intents, data)
          x = translator.translate(result, src="en", dest="es")
          print(x.text)  # Use x.text to access the translated response
      else:
          intents = pred_class(message, words, classes)  # Use x.text to access the translated message
          result = get_Response(intents, data)
          print(result)  # Use x.text to access the translated response